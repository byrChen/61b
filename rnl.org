* 1. Introduction to Java
*** 1.1 Essentials
**** Hello World 

     #+begin_src java :classname HelloWorld
       public class HelloWorld {
           public static void main(String[] args) {
               System.out.println("Hello world!");
           }
       }
     #+end_src

     #+RESULTS:
     : Hello world!

     *Some key syntactic features*
     - The pg consists of a *class declaration*: ~public class~. In Java, all code lives *inside of classes*.
     - Code is running inside of a *method called main*: ~public static void main(String[] args)~.
     -  ~{~ and ~}~.
     - Semi-colons ~;~.
**** Running a Java Pg 
     *The most common way to execute a Java pg*: Compiler ~javac~ --> Interpreter ~java~

     #+DOWNLOADED: https://joshhug.gitbooks.io/hug61b/content/assets/compilation_figure.svg @ 2019-03-01 10:36:13
     [[file:1.%20Introduction%20to%20Java/compilation_figure_2019-03-01_10-36-13.svg]]

     #+begin_src sh 
       javac HelloWorld.java 
       java HelloWorld
     #+end_src 
    
     #+RESULTS:
     : Hello world!

**** Vars and Loops

     #+begin_src java :classname HelloNumbers
       public class HelloNumbers {
           public static void main(String[] args) {
               int x = 0;
               while (x < 10) {
                   System.out.print(x + " ");
                   x = x + 1;
               }
           }
       }
     #+end_src 

     #+RESULTS:
     : 0 1 2 3 4 5 6 7 8 9

     *Some interesting features of this pg* 
     - Var x *must declared and given a type* before *used*.
     - Loop def in ~{}~, boolean expression in ~()~.
     - ~System.out.print~ instead of ~System.out.println~, no new line.
    
***** Exercise 1.1.2 Modify ~HelloNumbers~ so that it prints out the cumulative sum of the integers from 0 to 9. For example, your output should start with 0 1 3 6 10... and should end with 45. 

      #+begin_src java :classname HelloNumbers
        public class HelloNumbers {
            public static void main(String[] args) {
                int x = 1;
                int sum = 0;
                while (sum < 46) {
                    System.out.print(sum + " ");
                    sum = x + sum;
                    x = x + 1;
                }
            }
        }
      #+end_src 

      #+RESULTS:
      : 0 1 3 6 10 15 21 28 36 45

**** Static Typing
     One of the most important features of Java is that *all vars and expressions* have a so-called ~static type~, the type of a var can *never change*.

     #+begin_src java :classname HelloNumbers
       public class HelloNumbers {
           public static void main(String[] args) {
               int x = 0;
               while (x < 10) {
                   System.out.print(x + " ");
                   x = x + 1;
               }
               x = "horse";
           }
       }
     #+end_src 

     #+RESULTS:

     *Static typing advs*
     - The *compiler* ensures that all *types are compatible*, easier to *debug*.
     - *Compiled* pgs will *never* run into *type errors*.
     - Every var, para, and func has *a declared type*, easier to understand and reason code.

     #+begin_src java :classname test
       public class test {
           public static void main(String[] args) {
               String h = 5 + "horse";
               System.out.print(h);
           }
       }
     #+end_src 

     #+RESULTS:
     : 5horse
    
     #+begin_src python :results output
       print(5+'horse')
     #+end_src 

     #+RESULTS:

     - For java, *stronly typed*, ~String~ can concatenate the elements into a str, while ~int~ can't concatenate a num and a str.
     - For python, type not constrained, ~5+'horse'~ errors. 

**** Def Funcs in Java

     #+begin_src python :results output
       def larger(x, y):
           if x > y:
               return x
           return y

       print(larger(8, 10))
     #+end_src 

     #+RESULTS:
     : 10

     #+begin_src java :classname LargerDemo
       public class LargerDemo {
           public static int larger(int x, int y) {
               if (x > y) {
                   return x;
               }
               return y;
           }

           public static void main(String[] args) {
               System.out.println(larger(8, 10));
           }
       }
     #+end_src 

     #+RESULTS:
     : 10

     - In python, funcs can be declared *anywhere*.
     - In java, java code is *part of a class*, funcs must defed *belong to some class* and called *methods*.
     - ~def~ in python, ~public static~ in java.  
**** Style Guide
*** L1: Intro, Hello World Java
