#+TAGS: UNRESOLVED(u) QUESTIONS(q) EXTRA(e) REQUIRED(r) TOBEORG(t)

* HW0
** Creative Exercise 1a: Drawing a Triangle
   #+begin_src java :classname Test
     class Test {
         public static void main(String[] args) {
             String a = "*";
             int b = 1;
             while (b < 6) {
                 System.out.println(a);
                 b = b + 1;
                 a = a + "*";
             }
         }
     }
     #+end_src
** Creative Exercise 1b: DrawTriangle
   #+begin_src java :classname Test
     public class Test {
         public static void drawTriangle(int N) {
             int a = 1;
             String b = "*";
             while (a <= N) {
                 System.out.println(b);
                 a = a + 1;
                 b = b + "*";
             }
         }

         public static void main(String[] args) {
             drawTriangle(10);
         }
     }
   #+end_src 
   - ~public static void drawTriangle(int N)~ 
** Arrays
   #+begin_src java :classname 
     int[] numbers = new int[3];
     numbers[0] = 4;
     numbers[1] = 7;
     numbers[2] = 10;
     // or
     int[] numbers = new int[]{4, 7, 10};
     System.out.println(numbers[1]);
     System.out.println(numbers.length);
   #+end_src 
** Exercise 2
   #+begin_src java :classname Test 
     public class Test {
         public static int max(int[] m) {
             int a = m[0];
             int b = 1;
             while (b < m.length) {
                 if (a < m[b]) {
                     a = m[b];
                 }
                 b = b + 1;
             }
             return a;
         }
         public static void main(String[] args) {
             int[] numbers = new int[]{9, 2, 15, 2, 22, 10, 6};
             System.out.print(max(numbers));
         }
     }
     #+end_src
     - ~public static int max(int[] m)~ 
** Exercise 3
   #+begin_src java :classname Test
     public class Test {
         public static int max(int[] m) {
             int a = m[0];
             int b = 1;
             for (b = 1; b < m.length; b += 1) {
                 if (a < m[b]) {
                     a = m[b];
                 }
             }
             return a;
         }
         public static void main(String[] args) {
             int[] numbers = new int[]{9, 2, 15, 2, 22, 10, 6};
             System.out.print(max(numbers));
         }
     }
   #+end_src 
   - ~while () {}~ and ~for ( ; ; ) {}~ 
** Break and Continue
   #+begin_src java :classname Test
     public class Test {
         public static void main(String[] args) {
             String[] a = {"cat", "dog", "laser horse", "ketchup", "horse", "horbse"};

             for (int i = 0; i < a.length; i += 1) {
                 if (a[i].contains("horse")) {
                     continue;
                 }
                 for (int j = 0; j < 3; j += 1) {
                     System.out.println(a[i]);
                 }
             }
         }
     }
   #+end_src 
   - ~continue;~ 
   #+begin_src java :classname Test
     public class Test {
         public static void main(String[] args) {
             String[] a = {"cat", "dog", "laser horse", "ketchup", "horse", "horbse"};

             for (int i = 0; i < a.length; i += 1) {
                 for (int j = 0; j < 3; j += 1) {
                     System.out.println(a[i]);
                     if (a[i].contains("horse")) {
                         break;
                     }
                 }
             }
         }
     }
   #+end_src 
   - ~break;~ 
** Optional: Exercise 4                                               :EXTRA:
   #+begin_src java :classname Test
     public class Test {
         public static void windowPosSum(int[] a, int n) {
             for (int i = 0; i < a.length; i += 1) {
                 int b = i + n + 1;
                 if (b > a.length)
                     b = a.length;
                 for (int j = i + 1; j < b; j += 1) {
                     if (j > a.length + 1) {
                         break;
                     }
                     if (a[j] > 0) {
                         a[i] += a[j];
                     }
                     else {
                         continue;
                     }
                 }
             }
             /** your code here */
         }
   
         public static void main(String[] args) {
             int[] a = {1, 2, -3, 4, 5, 4};
             int n = 3;
             windowPosSum(a, n);
   
             // Should print 4, 8, -3, 13, 9, 4
             System.out.println(java.util.Arrays.toString(a));
         }
     }
   #+end_src 
   - ~for (int i = 0; i < a.length; i += 1) {}~ and ~for (int j = i + 1; j < b; j += 1) {}~
   - ~int b = i + n + 1;~ 
** The Enhanced For Loop
   #+begin_src java :classname Test
     public class Test {
         public static void main(String[] args) {
             String[] a = {"cat", "dog", "laser horse", "ketchup", "horse", "horbse"};

             for (String s : a) {
                 for (int j = 0; j < 3; j += 1) {
                     System.out.println(s);
                     if (s.contains("horse")) {
                         break;
                     }
                 }
             }
         }
     }
   #+end_src 
   - ~for (String s : a) {}~ 
* HW1 Packages, Interfaces, Generics, Exceptions, Iteration
** ~ArrayRingBuffer.java~  
*** ~ArrayRingBuffer~ 
    #+begin_src java :classname 
      public class ArrayRingBuffer<T> implements BoundedQueue<T> {
          /* Index for the next dequeue or peek. */
          private int first;
          /* Index for the next enqueue. */
          private int last;
          /* Variable for the fillCount. */
          private int fillCount;
          /* Array for storing the buffer data. */
          private T[] rb;

          /**
           ,* Create a new ArrayRingBuffer with the given capacity.
           ,*/
          public ArrayRingBuffer(int capacity) {
              // TODO: Create new array with capacity elements.
              //       first, last, and fillCount should all be set to 0.
              if (capacity <= 0) throw new IllegalArgumentException("capacity should > 0");
              rb = (T[]) new Object[capacity];
              first = 0;
              last = 0;
              fillCount = 0;
          }
          ...
      }
    #+end_src 
    - ~public class ArrayRingBuffer<T> implements BoundedQueue<T>~ 
    - ~(T[]) new Object[capacity]~ 
*** ~iterator~ 
    #+begin_src java :classname 
      @Override
      public Iterator<T> iterator() {
          return new ARBIterator();
      }

      private class ARBIterator implements Iterator<T> {
          private int index;
          private int remain;

          public ARBIterator() {
              index = first;
              remain = fillCount;
          }

          @Override
          public boolean hasNext() {
              return remain > 0;
          }

          @Override
          public T next() {
              T next = rb[index];
              index = (index + 1) % capacity();
              remain -= 1;
              return next;
          }
      }
    #+end_src 
    - ~public Iterator<T> iterator~ and ~return new ARBIterator()~
    - ~private class ARBIterator implements Iterator<T>~
    - ~ARBIterator~, ~hasNext~ and ~next~ 
*** ~equals~ 
    #+begin_src java :classname 
      @Override
      public boolean equals(Object o) {
          if (o instanceof ArrayRingBuffer) {
              Iterator oiter = ((ArrayRingBuffer) o).iterator();
              for (T r : rb) {
                  if (!r.equals(oiter.next())) return false;
              }
              return true;
          }
          return false;
      }
    #+end_src 
    - ~instance instanceof class~
    - ~Iterator oiter = ((ArrayRingBuffer) o).iterator()~
    - ~for (T r : rb)~ and ~r.equals(oiter.next())~ 
*** Question:                                                     :QUESTIONS:
    1. ~iterator~ 和 ~equals~ 的实现对吗？
** ~GuitarString.java~ 
*** ~GuitarString~ 
    #+begin_src java :classname 
      public class GuitarString {
          /** Constants. Do not change. In case you're curious, the keyword final
           ,* means the values cannot be changed at runtime. */
          private static final int SR = 44100;      // Sampling Rate
          private static final double DECAY = .996; // energy decay factor

          /* Buffer for storing sound data. */
          private BoundedQueue<Double> buffer;

          /* Create a guitar string of the given frequency.  */
          public GuitarString(double frequency) {
              if (frequency <= 0) throw new IllegalArgumentException("Frequency should > 0");
              int capacity = (int) Math.round(SR / frequency);
              buffer = new ArrayRingBuffer<>(capacity);
              for (int i = 0; i < capacity; i++) {
                  buffer.enqueue(0.0);
              }
          }
          ...
      }
    #+end_src 
    - ~Math.round~
    - ~buffer = new ArrayRingBuffer<>(capacity)~ will initial ~buffer.rb~ to all ~null~ 
*** ~pluck~ 
    #+begin_src java :classname 
      public void pluck() {
          //
          //       Make sure that your random numbers are different from each
          //       other.
          double r;
          for (int i = 0; i < buffer.capacity(); i++) {
              buffer.dequeue();
              r = Math.random() - 0.5;
              buffer.enqueue(r);
          }
      }
    #+end_src 
    - ~dequeue()~ first and then ~enqueue()~ 
** ~GuitarHero~                                            :UNRESOLVED:EXTRA:
** For Fun                                                 :UNRESOLVED:EXTRA:
*** ~TTFAF.java~ and ~GuitarPlayer.java~ 
*** More Fun
** Tests
*** ~TestArrayRingBuffer.java~ 
    #+begin_src java :classname 
      @Test
      public void testConstructor() {
          try {
              ArrayRingBuffer arb1 = new ArrayRingBuffer(0);
              ArrayRingBuffer arb2 = new ArrayRingBuffer(-1);
              fail();
          } catch (Exception e) {
              assertTrue(e.getMessage().contains("capacity should > 0"));
          }
          ArrayRingBuffer<Integer> arbI = new ArrayRingBuffer<>(10);
          Integer[] expectI = new Integer[10];
          assertEquals(10, arbI.capacity());
          assertEquals(0, arbI.fillCount());
          assertEquals(0, arbI.getfirst());
          assertEquals(0, arbI.getlast());
          assertArrayEquals(expectI, arbI.getrb());
      }

      @Test
      public void testEnqueue() {
          ArrayRingBuffer<Integer> arb = new ArrayRingBuffer<>(5);
          for (int i = 0; i < 5; i++) {
              arb.enqueue(i+1);
              assertEquals((i+1)%5, arb.getlast());
              assertEquals(i+1, arb.fillCount());
          }

          Integer[] expect = {1, 2, 3, 4, 5};
          assertArrayEquals(expect, arb.getrb());

          try {
              arb.enqueue(6);
              fail();
          } catch (Exception e) {
              assertTrue(e.getMessage().contains("Can't enqueue to a full arb"));
          }

          assertEquals(0, arb.getlast());
          assertArrayEquals(expect, arb.getrb());
      }

      @Test
      public void testDequeue() {
          ArrayRingBuffer<Integer> arb = new ArrayRingBuffer<>(5);
          try {
              arb.dequeue();
              fail();
          } catch (Exception e) {
              assertTrue(e.getMessage().contains("Can't dequeue to an empty arb"));
          }

          for (int i = 0; i < 5; i++) {
              arb.enqueue(i + 1);
          }

          for (int i = 0; i < 5; i++) {
              assertEquals((Integer) (i+1), arb.dequeue());
              assertEquals(4-i, arb.fillCount());
              assertEquals((i+1)%5, arb.getfirst());
          }

          Integer[] expect = new Integer[5];
          assertArrayEquals(expect, arb.getrb());
      }
    #+end_src 
* HW2 Percolation
** ~Percolation.java~ 
*** ~Percolation~  
    #+begin_src java :classname 
      public class Percolation {
          private boolean[][] grid;
          private int[] tOpens;
          private int[] bOpens;
          private int indexT, indexB = 0;
          private int openNum = 0;
          private int Num;
          private WeightedQuickUnionUF union;

          public Percolation(int N) {
              if (N <= 0) throw new IllegalArgumentException("Illegal number");
              else {
                  Num = N;
                  grid = new boolean[N][N];
                  tOpens = new int[N];
                  bOpens = new int[N];
                  for (int i = 0; i < N; i++) {
                      for (int j = 0; j < N; j++) {
                          grid[i][j] = false;
                      }
                  }
                  union = new WeightedQuickUnionUF(Num * Num);
              }
          }
          ...
      }
    #+end_src 
    - ~type[] x = new type[N]~
    - ~tOpens~ and ~bOpens~ to record opens on the top and bottom,respectively
*** ~open~ 
    #+begin_src java :classname 
      public void open(int row, int col) {
          if (validIndex(row, col)) {
              if (!grid[row][col]) {
                  grid[row][col] = true;
                  openNum += 1;
                  unionNeighbor(row, col);

                  if (row == 0) {
                      tOpens[indexT] = xyTo1D(row, col);
                      indexT += 1;
                  }
                  if (row == Num - 1) {
                      bOpens[indexB] = xyTo1D(row, col);
                      indexB += 1;
                  }
              }
          }
          else throw new IndexOutOfBoundsException("Index should >= 0 and <= 4");
      }

      private void unionNeighbor(int row, int col) {
          int u = xyTo1D(row, col);
          if (validIndex(row, col-1) && isOpen(row, col-1)) {
              union.union(xyTo1D(row, col-1), u);
          }
          if (validIndex(row, col+1) && isOpen(row, col+1)) {
              union.union(xyTo1D(row, col+1), u);
          }
          if (validIndex(row-1, col) && isOpen(row-1, col)) {
              union.union(xyTo1D(row-1, col), u);
          }
          if (validIndex(row+1, col) && isOpen(row+1, col)) {
              union.union(xyTo1D(row+1, col), u);
          }
      }

      private int xyTo1D(int row, int col) {
          return row * Num + col;
      }

      private boolean validIndex(int row, int col) {
          boolean v = (row-Num+1)*row <= 0 && (col-Num+1)*col <= 0;
          return v;
      }
    #+end_src 
    - In ~open~: ~grid[row][col] = true~ --> ~unionNeighbor~ --> update ~tOpens~ and ~bOpens~
    - ~xyTo1D~ + ~union.union~ 
*** ~isFull~ 
    #+begin_src java :classname 
      public boolean isFull(int row, int col) {
          if (validIndex(row, col)) {
              for (int i = 0; i < indexT; i++) {
                  if (union.connected(tOpens[i], xyTo1D(row, col))) return true;
              }
              return false;
          }
          else throw new IndexOutOfBoundsException("Index should >= 0 and <= 4");
      }
    #+end_src 
    - ~union.connected(tOpens[i], xyTo1D(row, col))~ 
*** ~percolates~ 
    #+begin_src java :classname 
      public boolean percolates() {
          int row = Num - 1;
          for (int i = 0; i < indexB; i++) {
              int col = bOpens[i] - row * Num;
              if (isFull(row, col)) return true;
          }
          return false;
      }
    #+end_src 
    - ~int col = bOpens[i] - row * Num~ and ~isFull(row, col)~ 
** ~PercolationStats.java~ 
   #+begin_src java :classname 
     public class PercolationStats {
         private int Times;
         private double m;
         private double s;

         public PercolationStats(int N, int T, PercolationFactory pf) {
             if (N <= 0 || T <= 0) throw new IllegalArgumentException("Illegal input");
             Times = T;
             double[] x = new double[T];
             for (int i = 0; i < T; i++) {
                 Percolation p = pf.make(N);
                 while (!p.percolates()) {
                     int row = StdRandom.uniform(N);
                     int col = StdRandom.uniform(N);
                     p.open(row, col);
                 }
                 x[i] = (double) p.numberOfOpenSites() / (N*N);
             }
             m = StdStats.mean(x);
             s = StdStats.stddev(x);
         }
         ...
     }
   #+end_src 
   - ~x[i] = (double) p.numberOfOpenSites() / (N*N)~ 
** ~Analysis.java~ <<1>>
   #+begin_src java :classname 
     public class Analysis {
    
         public static double testW(int N, int T, PercolationFactory pf) {
             Stopwatch s = new Stopwatch();
             PercolationStats p = new PercolationStats(N, T, pf);
             return s.elapsedTime();
         }

         public static double testU(int N, int T, PercolationFactoryU pf) {
             Stopwatch s = new Stopwatch();
             PercolationStatsU p = new PercolationStatsU(N, T, pf);
             return s.elapsedTime();
         }

         public static void main(String[] args) {
             int N = 200;
             int T = 30;
             PercolationFactory pf = new PercolationFactory();
             PercolationFactoryU pfU = new PercolationFactoryU();
             double rW = Analysis.testW(N, T, pf);
             double rU = Analysis.testU(N, T, pfU);
             System.out.println("N = " + N + ", T =" + T +", the runtime of WeightedQuickUnionUF.class is " + rW);
             System.out.println("N = " + N + ", T =" + T +", the runtime of UnionFind.class is " + rU);

             N = 100;
             T = 30;
             rW = Analysis.testW(N, T, pf);
             rU = Analysis.testU(N, T, pfU);
             System.out.println("N = " + N + ", T =" + T +", the runtime of WeightedQuickUnionUF.class is " + rW);
             System.out.println("N = " + N + ", T =" + T +", the runtime of UnionFind.class is " + rU);

             N = 100;
             T = 60;
             rW = Analysis.testW(N, T, pf);
             rU = Analysis.testU(N, T, pfU);
             System.out.println("N = " + N + ", T =" + T +", the runtime of WeightedQuickUnionUF.class is " + rW);
             System.out.println("N = " + N + ", T =" + T +", the runtime of UnionFind.class is " + rU);

             N = 200;
             T = 60;
             rW = Analysis.testW(N, T, pf);
             rU = Analysis.testU(N, T, pfU);
             System.out.println("N = " + N + ", T =" + T +", the runtime of WeightedQuickUnionUF.class is " + rW);
             System.out.println("N = " + N + ", T =" + T +", the runtime of UnionFind.class is " + rU);
         }
     }
   #+end_src 
   - $rU = 2 * rW$
   - Runtime ~ $N^2T$
*** Question:                                                     :QUESTIONS:
    1. 代码精简设计：怎么设计子类或者接口来尽可能的重用代码？只是 ~WeightQuickUnionUF union~ 和 ~UnionFind union~ 的区别而已
    2. 为什么 ~UnionFind~ 会比 ~WeightedQuickUnionUF~ 慢？二者比较
** Tests
*** ~testPercolation.java~ 
    #+begin_src java :classname 
      @Test
      public void testConstructor() {
          try {
              Percolation p = new Percolation(0);
              fail("No exception thrown.");
          } catch (Exception e) {
              assertTrue(e.getMessage().contains("Illegal number"));
          }

          for (int i = 1; i < 101; i++) {
              Percolation p = new Percolation(i);
              boolean[][] expect = new boolean[i][i];
              for (int j = 0; j < i; j++) {
                  for (int k = 0; k < i; k++) {
                      expect[j][k] = false;
                  }
              }
              boolean[][] actual = p.getGrid();
              assertArrayEquals(expect, actual);
          }
      }

      @Test
      public void testOpens() {
          Percolation p = new Percolation(5);
          try {
              p.open(-1, 0);
              p.open(0, -1);
              p.open(-1, -1);
              p.open(5, 0);
              p.open(0, 5);
              p.open(5, 5);
              p.open(5, -1);
              p.open(-1, 5);
              p.isOpen(-1, 0);
              p.isOpen(0, -1);
              p.isOpen(-1, -1);
              p.isOpen(5, 0);
              p.isOpen(0, 5);
              p.isOpen(5, 5);
              p.isOpen(5, -1);
              p.isOpen(-1, 5);
              p.isFull(-1, 0);
              p.isFull(0, -1);
              p.isFull(-1, -1);
              p.isFull(5, 0);
              p.isFull(0, 5);
              p.isFull(5, 5);
              p.isFull(5, -1);
              p.isFull(-1, 5);
              fail("No exception thrown.");
          } catch (IndexOutOfBoundsException e) {
              assertTrue(e.getMessage().contains("Index should >= 0 and <= 4"));
          }

          p.open(0,1);
          p.open(0,1);
          p.open(1,1);
          p.open(1,1);
          assertTrue(p.getGrid()[0][1]);
          assertTrue(p.getGrid()[1][1]);
          assertFalse(p.getGrid()[2][1]);
          assertFalse(p.getGrid()[3][1]);
          assertTrue(p.isOpen(0, 1));
          assertTrue(p.isOpen(1, 1));
          assertFalse(p.isOpen(2, 1));
          assertFalse(p.isOpen(3, 1));
          assertTrue(p.isFull(0, 1));
          assertTrue(p.isFull(1, 1));
          assertFalse(p.isFull(2, 1));
          assertFalse(p.isFull(3, 1));
          assertTrue(p.numberOfOpenSites() == 2);

          p.open(0,0);
          p.open(2,1);
          assertTrue(p.getUnion().connected(0, 1));
          assertTrue(p.getUnion().connected(1, 6));
          assertTrue(p.getUnion().connected(6, 11));
          assertTrue(p.getUnion().connected(0, 11));
          assertFalse(p.getUnion().connected(1, 3));
      }

      @Test
      public void testPercolates() {
          Percolation p = new Percolation(5);
          p.open(0, 0);
          p.open(0, 1);
          assertFalse(p.percolates());
          p.open(1,2);
          p.open(2,2);
          p.open(3,2);
          p.open(4,3);
          assertFalse(p.percolates());
          p.open(0, 2);
          p.open(4, 2);
          assertTrue(p.percolates());
      }
    #+end_src 
    - ~try {...; fail("string");} catch(Exception e) {...}~ 
* HW3 Hashing
** ~SimpleOomage.java~ 
*** Override ~equals~ and ~hashCode~ 
    #+begin_src java :classname 
      @Override
      public boolean equals(Object o) {
          // TODO: Write this method.
          if (o.getClass() == this.getClass()) { // or if (o instanceof SimpleOomage)
              boolean re = red == ((SimpleOomage) o).red;
              boolean ge = green == ((SimpleOomage) o).green;
              boolean be = blue == ((SimpleOomage) o).blue;
              if (re && ge && be) return true;
          }
          return false;
      }

      @Override
      public int hashCode() {
          if (!USE_PERFECT_HASH) {
              return red + green + blue;
          } else {
              // TODO: Write a perfect hash function for Simple Oomages.
              return red / 5 * 53 * 53 + green / 5 * 53 + blue / 5;
          }
      }
    #+end_src 
    - ~hashCode()~ in Java default returns the *memory address* of the object.
    - ~red / 5 * 53 * 53 + green / 5 * 53 + blue / 5~ due to 53 > 52, ~/ 5~ to avoid ~hashCode()~ always returns a multiple of 5 -> *evenly distributed*
    - ~o.getClass() == this.getClass()~ = ~o instanceof SimpleOomage~
    - About ~public~, ~protected~, ~default~ and ~private~
      #+DOWNLOADED: screenshot @ 2019-10-17 17:45:47
      [[file:pictures/HW3_Hashing/screenshot_2019-10-17_17-45-47.png]]
** ~OomageTestUtility.java~ 
*** ~haveNiceHashCodeSpread~  
    #+begin_src java :classname 
      public static boolean haveNiceHashCodeSpread(List<Oomage> oomages, int M) {
          /* TODO:
           ,* Write a utility function that returns true if the given oomages
           ,* have hashCodes that would distribute them fairly evenly across
           ,* M buckets. To do this, convert each oomage's hashcode in the
           ,* same way as in the visualizer, i.e. (& 0x7FFFFFFF) % M.
           ,* and ensure that no bucket has fewer than N / 50
           ,* Oomages and no bucket has more than N / 2.5 Oomages.
           ,*/
          int[] bucket = new int[M]; int N = oomages.size();
          for (int i = 0; i < N; i++) {
              int index = (oomages.get(i).hashCode() & 0x7FFFFFFF) % M;
              bucket[index] += 1;
          }
          for (int i = 0; i < M; i++) {
              if (bucket[i] < N / 50 || bucket[i] > N / 2.5) return false;
          }
          return true;
      }
    #+end_src 
    - ~(oomages.get(i).hashCode() & 0x7FFFFFFF) % M~ and ~bucket[index] += 1~
**** Question:                                                    :QUESTIONS:
     1. ~& 0x7FFFFFFF~ ？
** ~ComplexOomage.java~ 
*** ~hashCode~                                             :UNRESOLVED:EXTRA:
    #+begin_src java :classname 
      @Override
      public int hashCode() {
          int total = 0;
          for (int x : params) {
              total = total * 256;
              total = total + x;
          }
          return total;
      }
    #+end_src 
** Tests
*** ~TestSimpleOomage.java~ 
    #+begin_src java :classname 
      @Test
      public void testHashCodePerfect() {
          /* TODO: Write a test that ensures the hashCode is perfect,
            meaning no two SimpleOomages should EVER have the same
            hashCode UNLESS they have the same red, blue, and green values!
           ,*/
          SimpleOomage ooA = new SimpleOomage(5, 10, 20);
          int count = 0;

          for (int i = 0; i < 256; i+=5) {
              for (int j = 0; j < 256; j+=5) {
                  for (int k = 0; k < 256; k+=5) {
                      SimpleOomage ooA2 = new SimpleOomage(i, j, k);
                      if (ooA.hashCode() == ooA2.hashCode()) {
                          count++;
                      }
                  }
              }
          }
          assertEquals(1, count);
      }

      @Test
      public void testRandomOomagesHashCodeSpread() {
          List<Oomage> oomages = new ArrayList<>();
          int N = 10000;

          for (int i = 0; i < N; i += 1) {
              oomages.add(SimpleOomage.randomSimpleOomage());
          }

          assertTrue(OomageTestUtility.haveNiceHashCodeSpread(oomages, 10));
      }
    #+end_src 
    - ~if (ooA.hashCode() == ooA2.hashCode()) {count++;}~
**** Question:                                                    :QUESTIONS:
     1. ~testHashCodePerfect~ 有没有别的简单点的写法？利用 ~java.util.Set/HashSet/List/ArrayList~ 之类的？
*** ~TestComplexOomage.java~                                     :UNRESOLVED:
    #+begin_src java :classname 
      public void testWithDeadlyParams() {
          List<Oomage> deadlyList = new ArrayList<>();
          int N = 10000;

          for (int i = 0; i < N; i += 1) {
              deadlyList.add(ComplexOomage.random6ComplexOomage());
          }
          // Your code here.

          assertTrue(OomageTestUtility.haveNiceHashCodeSpread(deadlyList, 5));
      }
    #+end_src 
* HW4 AStarSolver                                                   :TOBEORG:
** ~AStarSolver.java~ 
*** ~AStarSolver~
    #+begin_src java :classname 
      public class AStarSolver<Vertex> implements ShortestPathsSolver<Vertex> {
          private SolverOutcome outcome;
          private double solutionWeight = 0;
          private List<Vertex> solution = new ArrayList<>();
          private double timeSpent;
          private HashMap<Vertex, Double> distTo = new HashMap<>();
          private HashMap<Vertex, Vertex> edgeTo = new HashMap<>();
          private HashSet<Vertex> visited = new HashSet<>();

          public AStarSolver(AStarGraph<Vertex> input, Vertex start, Vertex end, double timeout) {
              ArrayHeapMinPQ<Vertex> pq = new ArrayHeapMinPQ<>();
              distTo.put(start, 0.0);
              pq.add(start, distTo.get(start) + input.estimatedDistanceToGoal(start, end));
              Stopwatch sw = new Stopwatch();
              while (pq.size() != 0 && sw.elapsedTime() <= timeout) {
                  if (pq.getSmallest().equals(end)) {
                      break;
                  }
                  Vertex v = pq.removeSmallest();
                  visited.add(v);
                  for (WeightedEdge<Vertex> e : input.neighbors(v)) {
                      Vertex q = e.to(); double w = e.weight();
                      if (visited.contains(q)) continue;
                      double d = distTo.get(v) + w;
                      if (distTo.containsKey(q) && d >= distTo.get(q)) continue;
                      distTo.put(q, d);
                      edgeTo.put(q, v);
                      pq.add(q, d + input.estimatedDistanceToGoal(q, end));
                  }
              }
              timeSpent = sw.elapsedTime();
              if (timeSpent > timeout) outcome = SolverOutcome.TIMEOUT;
              else outcome = pq.size() == 0 ? SolverOutcome.UNSOLVABLE : SolverOutcome.SOLVED;
              if (outcome == SolverOutcome.SOLVED) {
                  solutionWeight = distTo.get(end);
                  solution.add(0, end);
                  while (!edgeTo.get(end).equals(start)) {
                      end = edgeTo.get(end);
                      solution.add(0, end);
                  }
                  solution.add(0, start);
              }
          }
          ...
      }
    #+end_src 
    - 
**** Question:                                                    :QUESTIONS:
     - [ ] 以上 ~A* Tree Search~ 算法空间上需要至少维持更新哪些变量？ ~distTo~, ~edgeTo~ 和 ~visited~ 能否精简？有无更好的选择？ -> ~A* Graph Search~ 不需要记录 ~distTo~ 和 ~edgeTo~ ？
     - [ ] [[file:~/csnds/Dropbox/orglife/61b_rnl.org::<<elink11>>][Memory optimized A* may visit the same vertex many times]] 怎么理解？代码如何改正？
     - [ ] 有没有没考虑的边界情况和无效输入？代码逻辑能否优化精简？
*** Extra challenge                                        :UNRESOLVED:EXTRA:
    - [[file:~/csnds/Dropbox/orglife/61b_rnl.org::<<elink10>>][One additional optimization can make]]
    - ~bearmaps.hw4.integerhoppuzzle~
      - Difficult challenge
    - ~bearmaps.hw4.wordladderpuzzle~
      - Extra challenge
    - ~bearmaps.hw4.slidingpuzzle~
      - Challenge
      - High Difficulty Challenge
    - Going Beyond Our Graph Examples
